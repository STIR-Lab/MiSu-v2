{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getListofSharedDevices } from \"../../services/listDevice\";\n\nvar setDevices = function setDevices(type, data, success) {\n  return {\n    type: type,\n    payload: _objectSpread(_objectSpread({}, data), {}, {\n      success: success\n    })\n  };\n};\n\nexport var getSharedDevicesAction = function getSharedDevicesAction(idToken) {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getListofSharedDevices(null, idToken));\n\n          case 3:\n            data = _context.sent;\n            dispatch(setDevices(\"SET_SHARED_DEVICES\", {\n              devices: data.message\n            }, true));\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(setDevices(\"SET_SHARED_DEVICES\", {\n              devices: []\n            }, false));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var updateDevices = function updateDevices(device, access) {\n  return function _callee2(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getListofSharedDevices(null, idToken));\n\n          case 3:\n            data = _context2.sent;\n            dispatch(setDevices(\"SET_SHARED_DEVICES\", {\n              devices: data.message\n            }, true));\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(setDevices(\"SET_SHARED_DEVICES\", null, false));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};","map":{"version":3,"sources":["/mnt/c/Users/SBS31/OneDrive/Desktop/real-SD/MiSu-v2/redux/Action/getSharedDevicesAction.js"],"names":["getListofSharedDevices","setDevices","type","data","success","payload","getSharedDevicesAction","idToken","dispatch","devices","message","updateDevices","device","access"],"mappings":";;;;;;;AAAA,SAASA,sBAAT;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAMC,IAAN,EAAWC,OAAX;AAAA,SAAuB;AACtCF,IAAAA,IAAI,EAAJA,IADsC;AAEtCG,IAAAA,OAAO,kCAAMF,IAAN;AAAWC,MAAAA,OAAO,EAAPA;AAAX;AAF+B,GAAvB;AAAA,CAAnB;;AAMA,OAAQ,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,OAAD,EAAa;AAChD,SAAQ,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoBR,sBAAsB,CAAC,IAAD,EAAMO,OAAN,CAF1C;;AAAA;AAEMJ,YAAAA,IAFN;AAKAK,YAAAA,QAAQ,CAACP,UAAU,CAAC,oBAAD,EAAsB;AAACQ,cAAAA,OAAO,EAAEN,IAAI,CAACO;AAAf,aAAtB,EAA+C,IAA/C,CAAX,CAAR;AALA;AAAA;;AAAA;AAAA;AAAA;AASAF,YAAAA,QAAQ,CAACP,UAAU,CAAC,oBAAD,EAAsB;AAACQ,cAAAA,OAAO,EAAE;AAAV,aAAtB,EAAqC,KAArC,CAAX,CAAR;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;AAYH,CAbO;AAgBR,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAASC,MAAT,EAAmB;AAE5C,SAAQ,kBAAOL,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoBR,sBAAsB,CAAC,IAAD,EAAMO,OAAN,CAF1C;;AAAA;AAEMJ,YAAAA,IAFN;AAQAK,YAAAA,QAAQ,CAACP,UAAU,CAAC,oBAAD,EAAsB;AAACQ,cAAAA,OAAO,EAAEN,IAAI,CAACO;AAAf,aAAtB,EAA+C,IAA/C,CAAX,CAAR;AARA;AAAA;;AAAA;AAAA;AAAA;AAWAF,YAAAA,QAAQ,CAACP,UAAU,CAAC,oBAAD,EAAsB,IAAtB,EAA4B,KAA5B,CAAX,CAAR;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;AAeH,CAjBM","sourcesContent":["import { getListofSharedDevices } from '../../services/listDevice'\n\n\n\nconst setDevices = (type,data,success) =>({\n    type,\n    payload: {...data,success}\n})\n\n\nexport  const getSharedDevicesAction = (idToken) => {\n    return  async (dispatch) =>{\n        try {\n            const data  = await getListofSharedDevices(null,idToken )\n\n            \n            dispatch(setDevices(\"SET_SHARED_DEVICES\",{devices: data.message}, true))\n            \n        } catch (error) {\n            //update prevent null fails : will show up as empty \n            dispatch(setDevices(\"SET_SHARED_DEVICES\",{devices: []}, false))\n        }\n    }\n}\n\n\nexport const updateDevices = (device, access) =>{\n\n    return  async (dispatch) =>{\n        try {\n            const data  = await getListofSharedDevices(null,idToken )\n\n            \n\n\n\n            dispatch(setDevices(\"SET_SHARED_DEVICES\",{devices: data.message}, true))\n            \n        } catch (error) {\n            dispatch(setDevices(\"SET_SHARED_DEVICES\",null, false))\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}