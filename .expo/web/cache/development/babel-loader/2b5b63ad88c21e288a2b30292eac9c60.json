{"ast":null,"code":"var _this = this;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Moment from 'moment';\nexport var createADevice = function createADevice(account, idToken, _ref) {\n  var title, description, response;\n  return _regeneratorRuntime.async(function createADevice$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          title = _ref.title, description = _ref.description;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/device', {\n            method: 'POST',\n            headers: {\n              Authorization: 'Bearer ' + idToken\n            },\n            body: JSON.stringify({\n              account: account.login_credentials_id,\n              name: title,\n              description: description\n            })\n          }));\n\n        case 3:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var checkUserExists = function checkUserExists(idToken, email) {\n  var response;\n  return _regeneratorRuntime.async(function checkUserExists$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/checkuserexists', {\n            method: 'POST',\n            headers: {\n              Authorization: 'Bearer ' + idToken\n            },\n            body: JSON.stringify({\n              email: email\n            })\n          }));\n\n        case 2:\n          response = _context2.sent;\n          return _context2.abrupt(\"return\", response.json());\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createSharedUser = function createSharedUser(idToken, email) {\n  var response;\n  return _regeneratorRuntime.async(function createSharedUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.t0 = _regeneratorRuntime;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/createshareduser', {\n            method: 'POST',\n            headers: {\n              Authorization: 'Bearer ' + idToken\n            },\n            body: JSON.stringify({\n              email: email\n            })\n          }));\n\n        case 3:\n          _context3.t1 = _context3.sent;\n          _context3.next = 6;\n          return _context3.t0.awrap.call(_context3.t0, _context3.t1);\n\n        case 6:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", response.json());\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createHub = function createHub(_ref2, idToken) {\n  var hub_url, hub_email, hub_password, response;\n  return _regeneratorRuntime.async(function createHub$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          hub_url = _ref2.hub_url, hub_email = _ref2.hub_email, hub_password = _ref2.hub_password;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/updatehubinfo', {\n            method: 'POST',\n            headers: {\n              Authorization: 'Bearer ' + idToken,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              hub_url: hub_url,\n              hub_email: hub_email,\n              hub_password: hub_password\n            })\n          }).catch(function (err) {\n            return console.log(err);\n          }));\n\n        case 3:\n          response = _context4.sent;\n          console.log(\"finished\");\n          return _context4.abrupt(\"return\", response.json());\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var useSharedDevice = function useSharedDevice(account, device, property) {\n  var response;\n  return _regeneratorRuntime.async(function useSharedDevice$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/usedevice', {\n            method: 'POST',\n            headers: {\n              Authorization: 'Bearer ' + _this.props.appData.idToken\n            },\n            body: JSON.stringify({\n              account: account.login_credentials_id,\n              device: device.shared_device_properties_id,\n              property: property.shared_property_id,\n              value: !property.value\n            })\n          }));\n\n        case 2:\n          response = _context5.sent;\n          return _context5.abrupt(\"return\", response.json());\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createProperty = function createProperty(idToken, accountId, deviceId, property, options) {\n  var days, scheduledEndDate, scheduledStartDate, scheduledEndTime, scheduledStartTime, tempDate, tempTime, i, response;\n  return _regeneratorRuntime.async(function createProperty$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          days = \"\";\n          scheduledEndDate = \"\";\n          scheduledStartDate = \"\";\n          scheduledEndTime = \"\";\n          scheduledStartTime = \"\";\n          tempDate = \"\";\n          tempTime = \"\";\n\n          if (options.selection == 0) {\n            tempDate = Moment(options.tempDate).format('MM/DD/YY');\n            tempTime = Moment(options.tempDate).format('HH:mm');\n          }\n\n          if (options.selection == 1) {\n            scheduledStartDate = Moment(options.scheduledStartDate).format('MM/DD/YY');\n            scheduledEndDate = Moment(options.scheduledEndDate).format('MM/DD/YY');\n            scheduledStartTime = Moment(options.scheduledStartDate).format('HH:mm');\n            scheduledEndTime = Moment(options.scheduledEndDate).format('HH:mm');\n            options.scheduledDays.sort(function (a, b) {\n              return a - b;\n            });\n\n            for (i = 0; i < options.scheduledDays.length; i++) {\n              if (options.scheduledDays[i] == 0) {\n                days += 'Mon';\n              } else if (options.scheduledDays[i] == 1) {\n                days += 'Tue';\n              } else if (options.scheduledDays[i] == 2) {\n                days += 'Wed';\n              } else if (options.scheduledDays[i] == 3) {\n                days += 'Thu';\n              } else if (options.scheduledDays[i] == 4) {\n                days += 'Fri';\n              } else if (options.scheduledDays[i] == 5) {\n                days += 'Sat';\n              } else if (options.scheduledDays[i] == 6) {\n                days += 'Sun';\n              }\n            }\n          }\n\n          if (!(property.access == 0)) {\n            _context6.next = 11;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", \"Cant create not allow property \" + property.access);\n\n        case 11:\n          _context6.next = 13;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/property', {\n            method: 'POST',\n            headers: {\n              Authorization: 'Bearer ' + idToken\n            },\n            body: JSON.stringify({\n              account: accountId,\n              device: deviceId,\n              name: property.title + \"\",\n              type: property.type + \"\",\n              path: property.links[0].href + \"\",\n              read_only: property.access == 2 ? 0 : 1,\n              unrestricted: options.selection == 2 ? 1 : 0,\n              temporary: options.selection == 0 ? 1 : 0,\n              temp_time_range_start: \"00:00\",\n              temp_time_range_end: tempTime,\n              temp_date: tempDate,\n              time_range: options.selection == 1 ? 1 : 0,\n              time_range_start: scheduledStartTime,\n              time_range_end: scheduledEndTime,\n              time_range_reoccuring: days,\n              time_range_start_date: scheduledStartDate,\n              time_range_end_date: scheduledEndDate,\n              gps_location: null,\n              gps_location_distance: null\n            })\n          }));\n\n        case 13:\n          response = _context6.sent;\n          return _context6.abrupt(\"return\", response.json());\n\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/mnt/c/Users/SBS31/OneDrive/Desktop/real-SD/MiSu-v2/services/creationService.js"],"names":["Moment","createADevice","account","idToken","title","description","fetch","method","headers","Authorization","body","JSON","stringify","login_credentials_id","name","response","json","checkUserExists","email","createSharedUser","createHub","hub_url","hub_email","hub_password","catch","err","console","log","useSharedDevice","device","property","props","appData","shared_device_properties_id","shared_property_id","value","createProperty","accountId","deviceId","options","days","scheduledEndDate","scheduledStartDate","scheduledEndTime","scheduledStartTime","tempDate","tempTime","selection","format","scheduledDays","sort","a","b","i","length","access","type","path","links","href","read_only","unrestricted","temporary","temp_time_range_start","temp_time_range_end","temp_date","time_range","time_range_start","time_range_end","time_range_reoccuring","time_range_start_date","time_range_end_date","gps_location","gps_location_distance"],"mappings":"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","sourcesContent":["import Moment from 'moment';\n\nexport const  createADevice = async (account, idToken,{ title , description}) => {\n  const response  =  await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/device', {\n        method: 'POST',\n        headers: \n        {\n          Authorization: 'Bearer ' + idToken,\n        },\n        body: JSON.stringify({\n          account: account.login_credentials_id,\n          name: title,\n          description: description\n        })\n      })\n\n      return response.json()\n}\n\n\n\nexport const checkUserExists = async (idToken, email) => {\nconst response =   await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/checkuserexists', {\n        method: 'POST',\n        headers: \n        {\n            Authorization: 'Bearer ' + idToken,\n        },\n        body: JSON.stringify({\n          // TODO: Have the email come from user input\n          email:  email,\n          })\n        })\n        return response.json()\n}\n\nexport const createSharedUser = async (idToken,email) =>  {\n  const response = await  await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/createshareduser', {\n    method: 'POST',\n    headers: \n    {\n        Authorization: 'Bearer ' + idToken,\n    },\n    // TODO: Change this to user input\n    body: JSON.stringify({\n      email: email\n      })\n    })\n\n    return response.json()\n}\n\n\n\n\nexport const createHub = async ({ \n  hub_url,\n  hub_email,\n  hub_password\n},idToken) => {\n  // console.log('Bearer ' + idToken)\n  // console.log(JSON.stringify({\n  //   hub_url: hub_url,\n  //   hub_email: hub_email,\n  //   hub_password: hub_password}))\n  const response = await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/updatehubinfo', {\n    method: 'POST',\n    headers: \n    {\n        Authorization: 'Bearer ' + idToken,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      hub_url: hub_url,\n      hub_email: hub_email,\n      hub_password: hub_password\n  })\n}).catch(err => console.log(err));\n  console.log(\"finished\")\n  return  response.json()\n}\n\n\n\n// Sends a command to a hub\nexport const useSharedDevice = async (account, device, property) => {\n    const response  = await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/usedevice', {\n          method: 'POST',\n          headers: \n          {\n              Authorization: 'Bearer ' + this.props.appData.idToken\n          },\n          body: JSON.stringify({\n            account: account.login_credentials_id,\n            device: device.shared_device_properties_id,\n            property: property.shared_property_id,\n            value: !property.value\n          })\n      })\n     return response.json()\n  \n}\n\n\nexport const createProperty = async (idToken,accountId,deviceId, property, options) => {\n\n  var days = \"\";\n  var scheduledEndDate = \"\";\n  var scheduledStartDate = \"\";\n  var scheduledEndTime = \"\";\n  var scheduledStartTime = \"\";\n  var tempDate = \"\";\n  var tempTime = \"\";\n  \n  // check if we've selected Temporary\n  if(options.selection == 0)\n  {\n    tempDate = Moment(options.tempDate).format('MM/DD/YY');\n    tempTime = Moment(options.tempDate).format('HH:mm');\n  }\n  // check if we've selected Scheduled\n  if(options.selection == 1)\n  {\n    // Get dates MM/DD/YY\n    scheduledStartDate = Moment(options.scheduledStartDate).format('MM/DD/YY');\n    scheduledEndDate = Moment(options.scheduledEndDate).format('MM/DD/YY');\n\n    // Get times MM:HH\n    scheduledStartTime = Moment(options.scheduledStartDate).format('HH:mm');\n    scheduledEndTime = Moment(options.scheduledEndDate).format('HH:mm');\n\n    // Sort options days\n    options.scheduledDays.sort((a, b) => a - b);\n    \n    // Build the string for days\n    for(var i = 0; i < options.scheduledDays.length; i++)\n    {\n      if(options.scheduledDays[i] == 0)\n      {\n        days += 'Mon';\n      }\n      else if(options.scheduledDays[i] == 1)\n      {\n        days += 'Tue';\n      }\n      else if(options.scheduledDays[i] == 2)\n      {\n        days += 'Wed';\n      }\n      else if(options.scheduledDays[i] == 3)\n      {\n        days += 'Thu';\n      }\n      else if(options.scheduledDays[i] == 4)\n      {\n        days += 'Fri';\n      }\n      else if(options.scheduledDays[i] == 5)\n      {\n        days += 'Sat';\n      }\n      else if(options.scheduledDays[i] == 6)\n      {\n        days += 'Sun';\n      }\n      // Days of the week follow format ddd, so the full week would be: MonTueWedThuFriSatSun\n    }\n  }\n\n  // Check if marked as No Access\n  if(property.access == 0)\n    return \"Cant create not allow property \" + property.access;\n\n  const response = await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/property', {\n    method: 'POST',\n    headers: \n    {\n        Authorization: 'Bearer ' + idToken,\n    },\n    body: JSON.stringify({\n      account: accountId,\n      device: deviceId,\n      name: property.title + \"\",\n      type: property.type + \"\",\n      path:property.links[0].href + \"\",\n      read_only: property.access == 2 ? 0 : 1,\n\n      // Unrestricted access is if the options we selected is 2\n      unrestricted: options.selection == 2 ? 1 : 0,\n      \n      // Temporary access is if the options we selected is 0\n      temporary: options.selection == 0 ? 1 : 0,\n      temp_time_range_start:\"00:00\", // Make sure to follow HH:MM 24-hour format for the time range\n      temp_time_range_end:tempTime,\n      temp_date: tempDate, // Dates should be of format MM/DD/YY\n      \n      // Time_Range access is if the options we selected is 1\n      time_range: options.selection == 1 ? 1 : 0,\n      time_range_start: scheduledStartTime,\n      time_range_end: scheduledEndTime,\n      time_range_reoccuring: days, // Days of the week follow format ddd, so the full week would be: MonTueWedThuFriSatSun\n      time_range_start_date:scheduledStartDate,\n      time_range_end_date:scheduledEndDate,\n\n      // GPS coming in the *future*\n      gps_location: null,\n      gps_location_distance: null\n    })\n  })\n  return response.json()\n}"]},"metadata":{},"sourceType":"module"}