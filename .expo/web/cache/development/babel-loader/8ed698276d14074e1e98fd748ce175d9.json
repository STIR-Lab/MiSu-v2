{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar INITIAL_STATE = {\n  temp_access: []\n};\nexport var modifyAccessReducer = function modifyAccessReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'MODIFY_ACCESSTATE':\n      var current = state.temp_access;\n      var found = current.findIndex(function (te) {\n        return te.title == action.payload.title;\n      });\n\n      if (found == -1) {\n        return {\n          temp_access: [].concat(_toConsumableArray(state.temp_access), [action.payload])\n        };\n      } else {\n        current.splice(found, 1);\n        return {\n          temp_access: [].concat(_toConsumableArray(current), [action.payload])\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/SBS31/OneDrive/Desktop/real-SD/MiSu-v2/redux/Reducer/modifyAcessStateReducer.js"],"names":["INITIAL_STATE","temp_access","modifyAccessReducer","state","action","type","current","found","findIndex","te","title","payload","splice"],"mappings":";AAAA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE;AADO,CAAtB;AAKC,OAAO,IAAMC,mBAAmB,GAAI,SAAvBA,mBAAuB,GAAmC;AAAA,MAAlCC,KAAkC,uEAA1BH,aAA0B;AAAA,MAAXI,MAAW;;AAEnE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE,UAAMC,OAAO,GAAEH,KAAK,CAACF,WAArB;AACC,UAAMM,KAAK,GAAID,OAAO,CAACE,SAAR,CAAmB,UAAAC,EAAE;AAAA,eAAIA,EAAE,CAACC,KAAH,IAAYN,MAAM,CAACO,OAAP,CAAeD,KAA/B;AAAA,OAArB,CAAf;;AAEA,UAAGH,KAAK,IAAI,CAAC,CAAb,EAAgB;AAEd,eAAO;AAAEN,UAAAA,WAAW,+BAAME,KAAK,CAACF,WAAZ,IAAwBG,MAAM,CAACO,OAA/B;AAAb,SAAP;AACD,OAHD,MAGM;AAEJL,QAAAA,OAAO,CAACM,MAAR,CAAeL,KAAf,EAAqB,CAArB;AAEA,eAAM;AAAEN,UAAAA,WAAW,+BAAMK,OAAN,IAAcF,MAAM,CAACO,OAArB;AAAb,SAAN;AACD;;AAGF;AACE,aAAQR,KAAR;AAjBN;AAmBH,CArBM","sourcesContent":["const INITIAL_STATE = {\n  temp_access: []\n }\n \n \n export const modifyAccessReducer =  (state = INITIAL_STATE, action) => {\n     \n     switch (action.type) {\n       case 'MODIFY_ACCESSTATE':\n         const current =state.temp_access\n          const found =  current.findIndex( te => te.title == action.payload.title )\n         \n          if(found == -1) {\n            \n            return { temp_access:[ ...state.temp_access,action.payload]};\n          }else {\n            \n            current.splice(found,1)\n            \n            return{ temp_access: [...current,action.payload] }\n          }\n \n         \n         default:\n           return  state\n     }\n }\n    "]},"metadata":{},"sourceType":"module"}