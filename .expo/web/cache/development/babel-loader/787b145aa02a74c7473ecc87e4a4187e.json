{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getListofSharedAccounts } from \"../../services/listDevice\";\n\nvar setSharedAccounts = function setSharedAccounts(type, data, success) {\n  return {\n    type: type,\n    payload: _objectSpread(_objectSpread({}, data), {}, {\n      success: success\n    })\n  };\n};\n\nexport var getSharedAccountsAction = function getSharedAccountsAction(IdToken) {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch(setSharedAccounts('SET_SHARED_ACCOUNTS', {\n              sharedAccounts: [],\n              error: null,\n              loading: false\n            }, true));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getListofSharedAccounts(null, IdToken));\n\n          case 4:\n            data = _context.sent;\n            dispatch(setSharedAccounts('SET_SHARED_ACCOUNTS', {\n              sharedAccounts: data.message,\n              error: null,\n              loading: false\n            }, true));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(setSharedAccounts('SET_SHARED_ACCOUNTS', {\n              sharedAccounts: [],\n              error: _context.t0.message,\n              loading: false\n            }, false));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n};","map":{"version":3,"sources":["/mnt/c/Users/SBS31/OneDrive/Desktop/real-SD/MiSu-v2/redux/Action/getSharedAccountsAction.js"],"names":["getListofSharedAccounts","setSharedAccounts","type","data","success","payload","getSharedAccountsAction","IdToken","dispatch","sharedAccounts","error","loading","message"],"mappings":";;;;;;;AAAA,SAASA,uBAAT;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb;AAAA,SAA0B;AAChDF,IAAAA,IAAI,EAAJA,IADgD;AAEhDG,IAAAA,OAAO,kCAAMF,IAAN;AAAYC,MAAAA,OAAO,EAAPA;AAAZ;AAFyC,GAA1B;AAAA,CAA1B;;AAKA,OAAQ,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,OAAD,EAAa;AAEjD,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECA,YAAAA,QAAQ,CAACP,iBAAiB,CAAC,qBAAD,EAAwB;AAAEQ,cAAAA,cAAc,EAAE,EAAlB;AAAsBC,cAAAA,KAAK,EAAE,IAA7B;AAAmCC,cAAAA,OAAO,EAAE;AAA5C,aAAxB,EAA2E,IAA3E,CAAlB,CAAR;AAFD;AAAA,6CAGoBX,uBAAuB,CAAC,IAAD,EAAMO,OAAN,CAH3C;;AAAA;AAGOJ,YAAAA,IAHP;AAICK,YAAAA,QAAQ,CAACP,iBAAiB,CAAC,qBAAD,EAAwB;AAAEQ,cAAAA,cAAc,EAAEN,IAAI,CAACS,OAAvB;AAAiCF,cAAAA,KAAK,EAAE,IAAxC;AAA8CC,cAAAA,OAAO,EAAE;AAAvD,aAAxB,EAAsF,IAAtF,CAAlB,CAAR;AAJD;AAAA;;AAAA;AAAA;AAAA;AAMCH,YAAAA,QAAQ,CAACP,iBAAiB,CAAC,qBAAD,EAAuB;AAAEQ,cAAAA,cAAc,EAAC,EAAjB;AAAqBC,cAAAA,KAAK,EAAE,YAAME,OAAlC;AAA0CD,cAAAA,OAAO,EAAE;AAAnD,aAAvB,EAAkF,KAAlF,CAAlB,CAAR;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASH,CAXO","sourcesContent":["import { getListofSharedAccounts } from '../../services/listDevice'\n\nconst setSharedAccounts = (type, data, success) => ({\n    type, \n    payload: {...data, success}\n})\n\nexport  const getSharedAccountsAction = (IdToken) => {\n   \n    return async (dispatch) =>{\n        try {\n            dispatch(setSharedAccounts('SET_SHARED_ACCOUNTS' ,{ sharedAccounts: [], error: null ,loading: false},true,))\n            const data = await getListofSharedAccounts(null,IdToken)\n            dispatch(setSharedAccounts('SET_SHARED_ACCOUNTS' ,{ sharedAccounts: data.message,  error: null ,loading: false},true,))\n        } catch (error) {\n            dispatch(setSharedAccounts('SET_SHARED_ACCOUNTS',{ sharedAccounts:[], error: error.message,loading: false },false))\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}