{"ast":null,"code":"var _this = this;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var getListofSharedDevices = function getListofSharedDevices() {\n  var hasNextToken,\n      idToken,\n      response,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getListofSharedDevices$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          hasNextToken = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;\n          idToken = _args.length > 1 ? _args[1] : undefined;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/getshareddevices', {\n            method: 'GET',\n            headers: {\n              Authorization: 'Bearer ' + idToken\n            }\n          }));\n\n        case 4:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.json());\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getDevices = function getDevices(idToken) {\n  var devices;\n  return _regeneratorRuntime.async(function getDevices$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          devices = [];\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/device', {\n            method: 'GET',\n            headers: {\n              Authorization: 'Bearer ' + idToken\n            }\n          }).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            if (data !== null || data.length > 0) {\n              data.forEach(function (item) {\n                var device = item;\n                var properties = {};\n\n                for (var key in item.properties) {\n                  if (item.properties.hasOwnProperty(key)) {\n                    var temp = item.properties[key];\n                    temp.isChecked = false;\n                    temp.value = null;\n                    properties[key] = temp;\n                  }\n                }\n\n                for (key in item.actions) {\n                  if (item.actions.hasOwnProperty(key)) {\n                    temp = item.actions[key];\n                    temp.type = 'action';\n                    temp.isChecked = false;\n                    temp.value = null;\n                    properties[key] = temp;\n                  }\n                }\n\n                device.properties = properties;\n                devices.push(device);\n              });\n            }\n          }));\n\n        case 3:\n          return _context2.abrupt(\"return\", devices);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getListofSharedAccounts = function getListofSharedAccounts() {\n  var hasNextToken,\n      idToken,\n      response,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getListofSharedAccounts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          hasNextToken = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : null;\n          idToken = _args3.length > 1 ? _args3[1] : undefined;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/getdevicesyouresharing', {\n            method: 'GET',\n            headers: {\n              Authorization: 'Bearer ' + idToken\n            }\n          }));\n\n        case 4:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", response.json());\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getValueForSharedDeviceProperty = function getValueForSharedDeviceProperty(account, device, property) {\n  var response;\n  return _regeneratorRuntime.async(function getValueForSharedDeviceProperty$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/getvalues', {\n            method: 'POST',\n            headers: {\n              Authorization: 'Bearer ' + _this.props.appData.idToken\n            },\n            body: JSON.stringify({\n              account: account.login_credentials_id,\n              device: device.shared_device_properties_id,\n              property: property.shared_property_id\n            })\n          }));\n\n        case 2:\n          response = _context4.sent;\n          return _context4.abrupt(\"return\", response.json());\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/mnt/c/Users/SBS31/OneDrive/Desktop/real-SD/MiSu-v2/services/listDevice.js"],"names":["getListofSharedDevices","hasNextToken","idToken","fetch","method","headers","Authorization","response","json","getDevices","devices","then","data","length","forEach","item","device","properties","key","hasOwnProperty","temp","isChecked","value","actions","type","push","getListofSharedAccounts","getValueForSharedDeviceProperty","account","property","props","appData","body","JSON","stringify","login_credentials_id","shared_device_properties_id","shared_property_id"],"mappings":";;;AAAA,OAAO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,UAAAA,YAAP,2DAAsB,IAAtB;AAA4BC,UAAAA,OAA5B;AAAA;AAAA,2CACdC,KAAK,CAAC,8EAAD,EAAiF;AAC5GC,YAAAA,MAAM,EAAE,KADoG;AAE5GC,YAAAA,OAAO,EAAE;AACRC,cAAAA,aAAa,EAAE,YAAYJ;AADnB;AAFmG,WAAjF,CADS;;AAAA;AAC/BK,UAAAA,QAD+B;AAAA,2CAO9BA,QAAQ,CAACC,IAAT,EAP8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;AAUP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOP,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBQ,UAAAA,OADqB,GACX,EADW;AAAA;AAAA,2CAEnBP,KAAK,CAAC,oEAAD,EAAuE;AACjFC,YAAAA,MAAM,EAAE,KADyE;AAEjFC,YAAAA,OAAO,EAAE;AACRC,cAAAA,aAAa,EAAE,YAAYJ;AADnB;AAFwE,WAAvE,CAAL,CAMJS,IANI,CAMC,UAACJ,QAAD;AAAA,mBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,WAND,EAOJG,IAPI,CAOC,UAACC,IAAD,EAAU;AACf,gBAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACC,MAAL,GAAc,CAAnC,EAAsC;AACrCD,cAAAA,IAAI,CAACE,OAAL,CAAa,UAAUC,IAAV,EAAgB;AAC5B,oBAAIC,MAAM,GAAGD,IAAb;AACA,oBAAIE,UAAU,GAAG,EAAjB;;AACA,qBAAK,IAAIC,GAAT,IAAgBH,IAAI,CAACE,UAArB,EAAiC;AAEhC,sBAAIF,IAAI,CAACE,UAAL,CAAgBE,cAAhB,CAA+BD,GAA/B,CAAJ,EAAyC;AACxC,wBAAIE,IAAI,GAAGL,IAAI,CAACE,UAAL,CAAgBC,GAAhB,CAAX;AAEAE,oBAAAA,IAAI,CAACC,SAAL,GAAiB,KAAjB;AACAD,oBAAAA,IAAI,CAACE,KAAL,GAAa,IAAb;AAEAL,oBAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBE,IAAlB;AACA;AACD;;AACD,qBAAKF,GAAL,IAAYH,IAAI,CAACQ,OAAjB,EAA0B;AAEzB,sBAAIR,IAAI,CAACQ,OAAL,CAAaJ,cAAb,CAA4BD,GAA5B,CAAJ,EAAsC;AACrCE,oBAAAA,IAAI,GAAGL,IAAI,CAACQ,OAAL,CAAaL,GAAb,CAAP;AAEAE,oBAAAA,IAAI,CAACI,IAAL,GAAY,QAAZ;AACAJ,oBAAAA,IAAI,CAACC,SAAL,GAAiB,KAAjB;AACAD,oBAAAA,IAAI,CAACE,KAAL,GAAa,IAAb;AAGAL,oBAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBE,IAAlB;AACA;AACD;;AAEDJ,gBAAAA,MAAM,CAACC,UAAP,GAAoBA,UAApB;AACAP,gBAAAA,OAAO,CAACe,IAAR,CAAaT,MAAb;AACA,eA9BD;AA+BA;AACD,WAzCI,CAFmB;;AAAA;AAAA,4CA6ClBN,OA7CkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAgDP,OAAO,IAAMgB,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOzB,UAAAA,YAAP,8DAAsB,IAAtB;AAA4BC,UAAAA,OAA5B;AAAA;AAAA,2CACfC,KAAK,CAAC,oFAAD,EAAuF;AAClHC,YAAAA,MAAM,EAAE,KAD0G;AAElHC,YAAAA,OAAO,EAAE;AACRC,cAAAA,aAAa,EAAE,YAAYJ;AADnB;AAFyG,WAAvF,CADU;;AAAA;AAChCK,UAAAA,QADgC;AAAA,4CAO/BA,QAAQ,CAACC,IAAT,EAP+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;AAUP,OAAO,IAAMmB,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAOC,OAAP,EAAgBZ,MAAhB,EAAwBa,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACvB1B,KAAK,CAAC,uEAAD,EAA0E;AACrGC,YAAAA,MAAM,EAAE,MAD6F;AAErGC,YAAAA,OAAO,EAAE;AACRC,cAAAA,aAAa,EAAE,YAAY,KAAI,CAACwB,KAAL,CAAWC,OAAX,CAAmB7B;AADtC,aAF4F;AAKrG8B,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBN,cAAAA,OAAO,EAAEA,OAAO,CAACO,oBADG;AAEpBnB,cAAAA,MAAM,EAAEA,MAAM,CAACoB,2BAFK;AAGpBP,cAAAA,QAAQ,EAAEA,QAAQ,CAACQ;AAHC,aAAf;AAL+F,WAA1E,CADkB;;AAAA;AACxC9B,UAAAA,QADwC;AAAA,4CAavCA,QAAQ,CAACC,IAAT,EAbuC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxC","sourcesContent":["export const getListofSharedDevices = async (hasNextToken = null, idToken) => {\n\tconst response = await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/getshareddevices', {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAuthorization: 'Bearer ' + idToken\n\t\t}\n\t});\n\treturn response.json();\n};\n\nexport const getDevices = async (idToken) => {\n\tlet devices = [];\n\tawait fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/device', {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAuthorization: 'Bearer ' + idToken\n\t\t}\n\t})\n\t\t.then((response) => response.json())\n\t\t.then((data) => {\n\t\t\tif (data !== null || data.length > 0) {\n\t\t\t\tdata.forEach(function (item) {\n\t\t\t\t\tvar device = item;\n\t\t\t\t\tvar properties = {};\n\t\t\t\t\tfor (var key in item.properties) {\n\t\t\t\t\t\t// This gets the name of the property since we don't know what the property is called\n\t\t\t\t\t\tif (item.properties.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tvar temp = item.properties[key];\n\t\t\t\t\t\t\t// This adds two key/value pairs to each device so we can tell when it is checked for sharing, and also the current state (on or off for example)\n\t\t\t\t\t\t\ttemp.isChecked = false;\n\t\t\t\t\t\t\ttemp.value = null;\n\t\t\t\t\t\t\t// properties.push({\"property\" : temp});\n\t\t\t\t\t\t\tproperties[key] = temp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (key in item.actions) {\n\t\t\t\t\t\t// This gets the name of the action since we don't know what the property is called\n\t\t\t\t\t\tif (item.actions.hasOwnProperty(key)) {\n\t\t\t\t\t\t\ttemp = item.actions[key];\n\t\t\t\t\t\t\t// This adds two key/value pairs to each device so we can tell when it is checked for sharing, and also the current state (on or off for example)\n\t\t\t\t\t\t\ttemp.type = 'action';\n\t\t\t\t\t\t\ttemp.isChecked = false;\n\t\t\t\t\t\t\ttemp.value = null;\n\t\t\t\t\t\t\t// properties.push({\"property\" : temp});\n\n\t\t\t\t\t\t\tproperties[key] = temp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Adds the new, updated key/value pairs to the device\n\t\t\t\t\tdevice.properties = properties;\n\t\t\t\t\tdevices.push(device);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t// console.log(\"%j\", null, devices);\n\treturn devices;\n};\n\nexport const getListofSharedAccounts = async (hasNextToken = null, idToken) => {\n\tconst response = await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/getdevicesyouresharing', {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAuthorization: 'Bearer ' + idToken\n\t\t}\n\t});\n\treturn response.json();\n};\n\nexport const getValueForSharedDeviceProperty = async (account, device, property) => {\n\tconst response = await fetch('https://c8zta83ta5.execute-api.us-east-1.amazonaws.com/test/getvalues', {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: 'Bearer ' + this.props.appData.idToken\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\taccount: account.login_credentials_id,\n\t\t\tdevice: device.shared_device_properties_id,\n\t\t\tproperty: property.shared_property_id\n\t\t})\n\t});\n\n\treturn response.json();\n};\n"]},"metadata":{},"sourceType":"module"}