{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createHub } from \"../../services/creationService\";\n\nvar registerHubStart = function registerHubStart(payload) {\n  return {\n    type: 'REGISTER_HUB',\n    payload: payload\n  };\n};\n\nvar registerHubSucess = function registerHubSucess(payload) {\n  return {\n    type: 'REGISTER_HUB',\n    payload: payload\n  };\n};\n\nvar registerHubFailed = function registerHubFailed(payload) {\n  return {\n    type: 'REGISTER_HUB',\n    payload: payload\n  };\n};\n\nexport var registerHubAction = function registerHubAction(_ref, idToken) {\n  var hub_url = _ref.hub_url,\n      hub_email = _ref.hub_email,\n      hub_password = _ref.hub_password;\n  return function _callee(dispatch) {\n    var hubDat, data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch(registerHubStart({\n              loading: true,\n              success: null,\n              error: null\n            }));\n            hub_url = hub_url + '.webthings.io';\n            hubDat = {\n              hub_url: hub_url,\n              hub_email: hub_email,\n              hub_password: hub_password\n            };\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(createHub(hubDat, idToken));\n\n          case 6:\n            data = _context.sent;\n            dispatch(registerHubSucess({\n              loading: false,\n              success: true,\n              error: null\n            }));\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(registerHubFailed({\n              loading: false,\n              success: false,\n              error: 'your error message'\n            }));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};","map":{"version":3,"sources":["/mnt/c/Users/SBS31/OneDrive/Desktop/real-SD/MiSu-v2/redux/Action/registerHubAction.js"],"names":["createHub","registerHubStart","payload","type","registerHubSucess","registerHubFailed","registerHubAction","idToken","hub_url","hub_email","hub_password","dispatch","loading","success","error","hubDat","data"],"mappings":";AAAA,SAASA,SAAT;;AAEA,IAAOC,gBAAgB,GAAE,SAAlBA,gBAAkB,CAACC,OAAD;AAAA,SAAa;AAClCC,IAAAA,IAAI,EAAE,cAD4B;AAElCD,IAAAA,OAAO,EAAPA;AAFkC,GAAb;AAAA,CAAzB;;AAKA,IAAOE,iBAAiB,GAAG,SAApBA,iBAAoB,CAACF,OAAD;AAAA,SAAa;AACpCC,IAAAA,IAAI,EAAE,cAD8B;AAEpCD,IAAAA,OAAO,EAAPA;AAFoC,GAAb;AAAA,CAA3B;;AAMA,IAAOG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACH,OAAD;AAAA,SAAa;AACpCC,IAAAA,IAAI,EAAE,cAD8B;AAEpCD,IAAAA,OAAO,EAAPA;AAFoC,GAAb;AAAA,CAA3B;;AAOA,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,OAI7BC,OAJ6B,EAIjB;AAAA,MAHZC,OAGY,QAHZA,OAGY;AAAA,MAFZC,SAEY,QAFZA,SAEY;AAAA,MADZC,YACY,QADZA,YACY;AACZ,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCA,YAAAA,QAAQ,CAACV,gBAAgB,CAAC;AAAEW,cAAAA,OAAO,EAAE,IAAX;AAAkBC,cAAAA,OAAO,EAAE,IAA3B;AAAiCC,cAAAA,KAAK,EAAE;AAAxC,aAAD,CAAjB,CAAR;AACAN,YAAAA,OAAO,GAAGA,OAAO,GAAG,eAApB;AACMO,YAAAA,MALP,GAKgB;AACXP,cAAAA,OAAO,EAAPA,OADW;AAEXC,cAAAA,SAAS,EAATA,SAFW;AAGXC,cAAAA,YAAY,EAAZA;AAHW,aALhB;AAAA;AAAA,6CAUqBV,SAAS,CAACe,MAAD,EAAQR,OAAR,CAV9B;;AAAA;AAUOS,YAAAA,IAVP;AAYCL,YAAAA,QAAQ,CAACP,iBAAiB,CAAC;AAAEQ,cAAAA,OAAO,EAAE,KAAX;AAAoBC,cAAAA,OAAO,EAAE,IAA7B;AAAmCC,cAAAA,KAAK,EAAE;AAA1C,aAAD,CAAlB,CAAR;AAZD;AAAA;;AAAA;AAAA;AAAA;AAeCH,YAAAA,QAAQ,CAACN,iBAAiB,CAAC;AAACO,cAAAA,OAAO,EAAE,KAAV;AAAkBC,cAAAA,OAAO,EAAE,KAA3B;AAAkCC,cAAAA,KAAK,EAAE;AAAzC,aAAD,CAAlB,CAAR;;AAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAkBH,CAvBM","sourcesContent":["import { createHub } from '../../services/creationService'\n\nconst  registerHubStart =(payload) =>({\n    type: 'REGISTER_HUB' ,\n    payload\n})\n\nconst  registerHubSucess = (payload) =>({\n    type: 'REGISTER_HUB' ,\n    payload\n})\n\n\nconst  registerHubFailed = (payload) =>({\n    type: 'REGISTER_HUB' ,\n    payload\n})\n\n\n\nexport const registerHubAction = ({ \n    hub_url,\n    hub_email,\n    hub_password\n  },idToken) => { \n    return async (dispatch) => {\n\n        try {\n            dispatch(registerHubStart({ loading: true , success: null, error: null}))\n            hub_url = hub_url + '.webthings.io';\n            const hubDat = { \n                hub_url,\n                hub_email,\n                hub_password\n              };\n            const data =  await createHub(hubDat,idToken)\n\n            dispatch(registerHubSucess({ loading: false ,  success: true, error: null}))\n            \n        } catch (error) {\n            dispatch(registerHubFailed({loading: false , success: false, error: 'your error message'}))\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}