{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { checkUserExists, createADevice, createProperty, createSharedUser } from \"../../services/creationService\";\nimport { deleteADevice, deleteAProperty } from \"../../services/deleteService\";\nimport { getSharedAccountsAction } from \"../Action/getSharedAccountsAction\";\nimport { getSharedDevicesAction } from \"../Action/getSharedDevicesAction\";\nimport { showToast } from \"../../utils/toast\";\nexport var shareStart = function shareStart(payload) {\n  return {\n    type: 'SHARING',\n    payload: payload\n  };\n};\nexport var shareSucess = function shareSucess(payload) {\n  return {\n    type: 'SHARING',\n    payload: payload\n  };\n};\nexport var shareFailed = function shareFailed(payload) {\n  return {\n    type: 'SHARING',\n    payload: payload\n  };\n};\nexport var shareAction = function shareAction(idToken, email, device, accounts, properties, options) {\n  return function _callee3(dispatch) {\n    var _await$checkUserExist, message, account, data, _account, des, preexisting, device2, _des, _des2;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(properties == null)) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            dispatch(shareStart({\n              loading: true\n            }));\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(checkUserExists(idToken, email));\n\n          case 5:\n            _await$checkUserExist = _context3.sent;\n            message = _await$checkUserExist.message;\n\n            if (!(message == 1)) {\n              _context3.next = 54;\n              break;\n            }\n\n            account = accounts.find(function (account) {\n              return account.guest_email == email;\n            });\n\n            if (account) {\n              _context3.next = 26;\n              break;\n            }\n\n            _context3.next = 12;\n            return _regeneratorRuntime.awrap(createSharedUser(idToken, email));\n\n          case 12:\n            data = _context3.sent;\n            _account = {\n              \"login_credentials_id\": data.message,\n              \"devices\": []\n            };\n            _context3.next = 16;\n            return _regeneratorRuntime.awrap(createADevice(_account, idToken, {\n              title: device.title,\n              description: device.description\n            }));\n\n          case 16:\n            des = _context3.sent;\n            device.id = des.message;\n            _context3.next = 20;\n            return _regeneratorRuntime.awrap(Promise.all(properties.map(function _callee(prop) {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return _regeneratorRuntime.awrap(createProperty(idToken, _account.login_credentials_id, device.id, prop, options));\n\n                    case 2:\n                      return _context.abrupt(\"return\", _context.sent);\n\n                    case 3:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            })));\n\n          case 20:\n            showToast(\"Sent share request\");\n            dispatch(getSharedAccountsAction(idToken));\n            dispatch(getSharedDevicesAction(idToken));\n            dispatch(shareSucess({\n              loading: false,\n              success: true\n            }));\n            _context3.next = 52;\n            break;\n\n          case 26:\n            preexisting = 0;\n\n            for (device2 in account.devices) {\n              if (device.title === account.devices[device2].name && device.description === account.devices[device2].description) {\n                device.id = account.devices[device2].shared_device_properties_id;\n                preexisting = 1;\n              }\n            }\n\n            if (!properties.every(function (x) {\n              return x.access == 0 || x.access == null;\n            })) {\n              _context3.next = 41;\n              break;\n            }\n\n            if (!(preexisting == 1)) {\n              _context3.next = 36;\n              break;\n            }\n\n            _context3.next = 32;\n            return _regeneratorRuntime.awrap(deleteADevice(account.login_credentials_id, device.id, idToken));\n\n          case 32:\n            _des = _context3.sent;\n            showToast(\"Removed device\");\n            _context3.next = 37;\n            break;\n\n          case 36:\n            showToast(\"No properties selected\");\n\n          case 37:\n            dispatch(getSharedAccountsAction(idToken));\n            dispatch(getSharedDevicesAction(idToken));\n            dispatch(shareSucess({\n              loading: false,\n              success: true\n            }));\n            return _context3.abrupt(\"return\");\n\n          case 41:\n            if (!(preexisting === 0)) {\n              _context3.next = 46;\n              break;\n            }\n\n            _context3.next = 44;\n            return _regeneratorRuntime.awrap(createADevice(account, idToken, {\n              title: device.title,\n              description: device.description\n            }));\n\n          case 44:\n            _des2 = _context3.sent;\n            device.id = _des2.message;\n\n          case 46:\n            _context3.next = 48;\n            return _regeneratorRuntime.awrap(Promise.all(properties.map(function _callee2(prop) {\n              var dvc, p;\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      dvc = 0;\n\n                    case 1:\n                      if (!(dvc < account.devices.length)) {\n                        _context2.next = 20;\n                        break;\n                      }\n\n                      p = 0;\n\n                    case 3:\n                      if (!(p < account.devices[dvc].properties.length)) {\n                        _context2.next = 17;\n                        break;\n                      }\n\n                      if (!(account.devices[dvc].properties[p].name == prop.title)) {\n                        _context2.next = 14;\n                        break;\n                      }\n\n                      _context2.prev = 5;\n                      _context2.next = 8;\n                      return _regeneratorRuntime.awrap(deleteAProperty(account, idToken, device.id, account.devices[dvc].properties[p]));\n\n                    case 8:\n                      _context2.next = 14;\n                      break;\n\n                    case 10:\n                      _context2.prev = 10;\n                      _context2.t0 = _context2[\"catch\"](5);\n                      console.log('********errror*****');\n                      console.log('error deleting property');\n\n                    case 14:\n                      p++;\n                      _context2.next = 3;\n                      break;\n\n                    case 17:\n                      dvc++;\n                      _context2.next = 1;\n                      break;\n\n                    case 20:\n                      _context2.next = 22;\n                      return _regeneratorRuntime.awrap(createProperty(idToken, account.login_credentials_id, device.id, prop, options));\n\n                    case 22:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, [[5, 10]], Promise);\n            })));\n\n          case 48:\n            if (preexisting == 0) showToast(\"Shared device!\");else showToast(\"Updated permissions!\");\n            dispatch(getSharedAccountsAction(idToken));\n            dispatch(getSharedDevicesAction(idToken));\n            dispatch(shareSucess({\n              loading: false,\n              success: true\n            }));\n\n          case 52:\n            _context3.next = 56;\n            break;\n\n          case 54:\n            showToast(\"User not found... Cancelling sharing\");\n            dispatch(shareFailed({\n              loading: false,\n              success: false\n            }));\n\n          case 56:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/mnt/c/Users/SBS31/OneDrive/Desktop/real-SD/MiSu-v2/redux/Action/shareAction.js"],"names":["checkUserExists","createADevice","createProperty","createSharedUser","deleteADevice","deleteAProperty","getSharedAccountsAction","getSharedDevicesAction","showToast","shareStart","payload","type","shareSucess","shareFailed","shareAction","idToken","email","device","accounts","properties","options","dispatch","loading","message","account","find","guest_email","data","title","description","des","id","Promise","all","map","prop","login_credentials_id","success","preexisting","device2","devices","name","shared_device_properties_id","every","x","access","dvc","length","p","console","log"],"mappings":"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","sourcesContent":["import { checkUserExists, createADevice, createProperty, createSharedUser } from '../../services/creationService'\nimport { deleteADevice, deleteAProperty } from '../../services/deleteService'\nimport { getSharedAccountsAction } from '../Action/getSharedAccountsAction'\nimport { getSharedDevicesAction } from '../Action/getSharedDevicesAction'\nimport { showToast } from '../../utils/toast';\n\nexport const  shareStart =(payload) =>({\n    type: 'SHARING' ,\n    payload\n})\n\nexport const  shareSucess = (payload) =>({\n    type: 'SHARING' ,\n    payload\n})\n\n\nexport const  shareFailed = (payload) =>({\n    type: 'SHARING' ,\n    payload\n})\n\n\n\nexport const shareAction = (idToken, email,device, accounts, properties, options) => { \n    return async (dispatch) => {\n\n\n        if(properties == null)\n        {\n            return;   \n        }\n\n        dispatch(shareStart({ loading: true}))\n\n        //check  if email exist \n\n        const { message} = await checkUserExists(idToken,email)\n\n        if (message == 1) {\n            const  account = accounts.find( account => account.guest_email == email)\n                \n            if(!account){\n                const data = await createSharedUser(idToken,email)\n                \n                const account = {\n                    \"login_credentials_id\": data.message,\n                    \"devices\" : []\n                }\n\n                const des = await createADevice(account,idToken,{ title: device.title, description: device.description})\n\n                device.id = des.message;\n\n                await Promise.all(properties.map(async prop => \n                    await createProperty(idToken,account.login_credentials_id,device.id,prop,options)\n                ))\n                \n                showToast(\"Sent share request\");\n                dispatch(getSharedAccountsAction(idToken))\n                dispatch(getSharedDevicesAction(idToken))\n                dispatch(shareSucess({ loading: false ,success: true}))\n            }\n            else \n            {\n                var preexisting = 0;\n                for (var device2 in account.devices)\n                {\n                    if (device.title === account.devices[device2].name && device.description === account.devices[device2].description)\n                    {\n\n                        device.id = account.devices[device2].shared_device_properties_id;\n                        preexisting = 1;\n                    }\n                }\n                // Check if all properties are set to allow 0\n                if(properties.every(x => x.access == 0 || x.access == null))\n                {\n                    // then delete the device\n                    if(preexisting == 1)\n                    {\n                        const des = await deleteADevice(account.login_credentials_id, device.id,idToken)\n                        showToast(\"Removed device\");\n                    }\n                    else\n                        showToast(\"No properties selected\");\n                    dispatch(getSharedAccountsAction(idToken))\n                    dispatch(getSharedDevicesAction(idToken))\n                    dispatch(shareSucess({ loading: false ,success: true}))\n                    return;\n                }\n\n                // If the device has not been previously shared, create a new entry\n                if (preexisting === 0)\n                {\n                    const des = await createADevice(account,idToken,{ title: device.title, description: device.description})\n                    device.id = des.message;\n                }\n\n                await Promise.all(properties.map(async prop => \n                {\n                    // check if the property exist \n                    // Check if the device is already shared to the user\n                    for(var dvc = 0; dvc < account.devices.length; dvc++) \n                    {\n                        for(var p = 0; p < account.devices[dvc].properties.length; p++) \n                        {\n                            if(account.devices[dvc].properties[p].name == prop.title)\n                            {\n                                try {\n                                    await deleteAProperty(account,idToken,device.id,account.devices[dvc].properties[p])\n                                } catch (error) {\n\n                                    console.log('********errror*****')\n                                    console.log('error deleting property')\n                                }\n                                \n                            }\n                        }\n                    }\n                    await createProperty(idToken,account.login_credentials_id,device.id,prop,options)\n                }))\n\n                if(preexisting == 0)\n                    showToast(\"Shared device!\");\n                else\n                    showToast(\"Updated permissions!\");\n                dispatch(getSharedAccountsAction(idToken))\n                dispatch(getSharedDevicesAction(idToken))\n                dispatch(shareSucess({ loading: false ,success: true}))\n            }\n        }\n        else {\n            showToast(\"User not found... Cancelling sharing\");\n            dispatch(shareFailed({ loading: false, success : false}))\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}